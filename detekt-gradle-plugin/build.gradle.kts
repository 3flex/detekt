plugins {
    module
    `java-gradle-plugin`
    `java-test-fixtures`
    idea
    id("com.gradle.plugin-publish")
}

repositories {
    mavenCentral()
    google()
}

idea {
    module {
        testSourceDirs = testSourceDirs + file("src/intTest/kotlin")
    }
}

val test: SourceSet by sourceSets.getting
val testFixtures: SourceSet by sourceSets.getting
val intTest: SourceSet by sourceSets.creating

val runtimePlugin: Configuration by configurations.creating
val intTestImplementation: Configuration by configurations.getting {
    extendsFrom(configurations.testImplementation.get())
}
val intTestRuntimeOnly: Configuration by configurations.getting {
    extendsFrom(configurations.testRuntimeOnly.get())
}

configurations.compileOnly { extendsFrom(runtimePlugin) }

dependencies {
    implementation(libs.kotlin.gradlePluginApi)
    implementation("io.github.detekt.sarif4k:sarif4k")
    runtimePlugin(libs.android.gradlePlugin)
    runtimePlugin(libs.kotlin.gradlePlugin)

    testImplementation(projects.detektTestUtils)
    testImplementation(libs.kotlin.gradlePlugin)
}

gradlePlugin {
    // hack to prevent building two jar's overwriting each other and leading to invalid signatures
    // when publishing the Gradle plugin, this property must be present
    isAutomatedPublishing = System.getProperty("automatePublishing")?.toBoolean() ?: false
    plugins {
        register("detektPlugin") {
            id = "io.gitlab.arturbosch.detekt"
            implementationClass = "io.gitlab.arturbosch.detekt.DetektPlugin"
        }
    }
    testSourceSets(testFixtures, intTest, test) // Source sets that require the Gradle TestKit dependency
}

// Manually inject dependency to gradle-testkit since the default injected plugin classpath is from `main.runtime`.
tasks.pluginUnderTestMetadata {
    pluginClasspath.from(runtimePlugin)
}

tasks.validatePlugins {
    enableStricterValidation.set(true)
}

pluginBundle {
    website = "https://detekt.github.io/detekt"
    vcsUrl = "https://github.com/detekt/detekt"
    description = "Static code analysis for Kotlin"
    tags = listOf("kotlin", "detekt", "code-analysis", "linter", "codesmells", "android")

    (plugins) {
        "detektPlugin" {
            id = "io.gitlab.arturbosch.detekt"
            displayName = "Static code analysis for Kotlin"
        }
    }
}

tasks {
    val writeDetektVersionProperties by registering(WriteProperties::class) {
        description = "Write the properties file with the Detekt version to be used by the plugin"
        encoding = "UTF-8"
        outputFile = file("$buildDir/versions.properties")
        property("detektVersion", project.version)
    }

    processResources {
        from(writeDetektVersionProperties)
    }

    processTestResources {
        from(writeDetektVersionProperties)
    }

    javadocJar {
        enabled = false // javadoc is generated by publishPluginJar task
    }

    sourcesJar {
        enabled = false // sources JAR is generated by publishPluginJavaDocsJar task
    }

    val integrationTest = register<Test>("integrationTest") {
        description = "Runs the integration tests."
        group = "verification"
        testClassesDirs = intTest.output.classesDirs
        classpath = intTest.runtimeClasspath
        shouldRunAfter(test)
    }

    check {
        dependsOn(integrationTest)
    }
}

with(components["java"] as AdhocComponentWithVariants) {
    withVariantsFromConfiguration(configurations["testFixturesApiElements"]) { skip() }
    withVariantsFromConfiguration(configurations["testFixturesRuntimeElements"]) { skip() }
}
